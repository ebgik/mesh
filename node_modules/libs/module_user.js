var db = require('libs/module_db');
var crypto = require('crypto');


exports.checkUser = function(email,pass,callback) {
	var pass = crypto.createHash('md5').update(pass).digest("hex");

	var query = db.query('SELECT * FROM users WHERE email = ? AND pass = ?',[email, pass], function(err,result) {
	  if (err)
	  	callback('error');
	  else
	  	if (result[0]) 
	  		callback(result[0]);
	  	else callback('none');
	});
}


exports.sendSession = function(user,callback){
	var hash = Math.random().toString(36);
	var sessionStr = user.email+user.pass+hash;
	var session =  crypto.createHash('md5').update(sessionStr).digest("hex");
	var query = db.query('INSERT INTO sessions SET user_id = ?, session = ?',[user.id,session],function(err,result){
		//console.log(err);
		if (err)
			callback('error');
		else callback(session);
	})

}

exports.deleteSession = function(session,callback){
	var query = db.query('DELETE FROM sessions WHERE session = ?',[session],function(err,result){
		if (err)
			callback('error');
		else callback('success');
	})

}

exports.checkSession = function(session,callback){
	//console.log(session)
	var query = db.query('SELECT * FROM sessions WHERE session = ? LIMIT 1',[session],function(err,result){
		//console.log(result);
		if (err)
			callback('error');
		else
		{
			if (result[0])
			queryUser = db.query('SELECT * FROM users WHERE id = ?',[result[0].user_id],function(errUser,resultUser){
				if (errUser)
					callback('error');
				else callback(resultUser);
			})
			else callback('none');
			
		}
	})
}



exports.getUserInfo = function(id,callback){
	var query = db.query('SELECT * FROM users WHERE id = ?',[id],function(err,result){
		if (err||!result[0])
			callback('error');
		else callback(result[0]);
	})
}

exports.getUsers = function(id,callback) {

	var query = db.query('SELECT id,name,image FROM users WHERE id NOT LIKE ?',[id],function(err,result) {
	  if (err)
	  	callback('error');
	  else
	  {
	  	if (result.length>0) 
	  		callback(result);
	  	else callback('none');
	  }
	  	
	});
}


exports.addSocket = function(cook,sock,callback){
	//console.log(sock)
	var query = db.query('UPDATE sessions SET socket_id = ? WHERE session = ?',
		[sock,cook],
		function(err,result){
			//console.log(result)
			callback(err,result);
		})
}



exports.getSocket = function(id,callback){
	var query = db.query('SELECT socket_id FROM sessions WHERE user_id = ?',[id],
		function(err,result){
			if (err) callback('error')
			else
			{
				if (result) callback(result)
				else callback('none');
			}
		})
}


exports.searchUsers = function(str,callback){
	var query = db.query('SELECT id,name,family,image FROM users WHERE name LIKE "%'+str+'%" OR family LIKE "%'+str+'%"',
		function(err,result){
			if (err) callback('error')
			else
			{
				if (result.length>0)
					callback(result)
				else callback('none');
			}
		})
}


exports.getPeers = function(str,callback){
	var strPeers = str.split('_'),
		array = [];
	//console.log(strPeers)
	strPeers.forEach(function(item,i,arr){
		var query = db.query('SELECT id,name,family FROM users WHERE id = ?',[strPeers[i]],
			function(err,result){
				if (err||result.length==0) callback('none');
				else 
				{
					array.push(result[0]);
					if (i==(strPeers.length-1))
						callback(array);
				}
			})
	})
	
}


